{"name":"Sequenced","tagline":"Generate scoped sequential IDs for ActiveRecord models","body":"Sequenced is a simple gem that generates scoped sequential IDs for \r\nActiveRecord models. This gem provides an `acts_as_sequenced` macro that \r\nautomatically assigns a unique, sequential ID to each record. The sequential ID is \r\nnot a replacement for the database primary key, but rather adds another way to \r\nretrieve the object without exposing the primary key.\r\n\r\n## Purpose\r\n\r\nIt's generally a bad practice to expose your primary keys to the world \r\nin your URLs. However, it is often appropriate to number objects in sequence \r\n(in the context of a parent object).\r\n\r\nFor example, given a Question model that has many Answers, it makes sense\r\nto number answers sequentially for each individual question. You can achieve \r\nthis with Sequenced in one line of code:\r\n\r\n```ruby\r\nclass Question < ActiveRecord::Base\r\n  has_many :answers\r\nend\r\n\r\nclass Answer < ActiveRecord::Base\r\n  belongs_to :question\r\n  acts_as_sequenced scope: :question_id\r\nend\r\n```\r\n\r\n## Installation\r\n\r\nAdd the gem to your Gemfile:\r\n   \r\n    gem 'sequenced'\r\n\r\nInstall the gem with bundler:\r\n\r\n    bundle install\r\n\r\n## Usage\r\n\r\nTo add a sequential ID to a model, first add an integer column called\r\n`sequential_id` to the model (or you many name the column anything you\r\nlike and override the default). For example:\r\n\r\n    rails generate migration add_sequential_id_to_answers sequential_id:integer\r\n    rake db:migrate\r\n\r\nThen, call the `acts_as_sequenced` macro in your model class:\r\n\r\n```ruby\r\nclass Answer < ActiveRecord::Base\r\n  belongs_to :question\r\n  acts_as_sequenced scope: :question_id\r\nend\r\n```\r\n\r\nThe `scope` option can be any attribute, but will typically be the foreign\r\nkey of an associated parent object. You can even scope by multiple columns\r\nfor polymorphic relationships:\r\n\r\n```ruby\r\nclass Answer < ActiveRecord::Base\r\n  belongs_to :questionable, :polymorphic => true\r\n  acts_as_sequenced scope: [:questionable_id, :questionable_type]\r\nend\r\n```\r\n\r\n## Schema and data integrity\r\n\r\n**This gem is only concurrent-safe for PostgreSQL databases**. For other database systems, unexpected behavior may occur if you attempt to create records concurrently.\r\n\r\nYou can mitigate this somewhat by applying a unique index to your sequential ID column (or a multicolumn unique index on sequential ID and scope columns, if you are using scopes). This will ensure that you can never have duplicate sequential IDs within a scope, causing concurrent updates to instead raise a uniqueness error at the database-level.\r\n\r\nIt is also a good idea to apply a not-null constraint to your sequential ID column as well if you never intend to skip it.\r\n\r\nHere is an example migration for a model that has a `sequential_id` scoped to a `burrow_id`:\r\n\r\n```ruby\r\n# app/db/migrations/20151120190645_create_badgers.rb\r\nclass CreateBadgers < ActiveRecord::Migration\r\n  def change\r\n    create_table :badgers do |t|\r\n      t.integer :sequential_id, null: false\r\n      t.integer :burrow_id\r\n    end\r\n\r\n    add_index :badgers, [:sequential_id, :burrow_id], unique: true\r\n  end\r\nend\r\n```\r\n\r\n## Configuration\r\n\r\n### Overriding the default sequential ID column\r\n\r\nBy default, Sequenced uses the `sequential_id` column and assumes it already \r\nexists. If you wish to store the sequential ID in different integer column, \r\nsimply specify the column name with the `column` option:\r\n\r\n```ruby\r\nacts_as_sequenced scope: :question_id, column: :my_sequential_id\r\n```\r\n\r\n### Starting the sequence at a specific number\r\n\r\nBy default, Sequenced begins sequences with 1. To start at a different \r\ninteger, simply set the `start_at` option:\r\n\r\n```ruby\r\nacts_as_sequenced start_at: 1000\r\n```\r\n\r\nYou may also pass a lambda to the `start_at` option:\r\n\r\n```ruby\r\nacts_as_sequenced start_at: lambda { |r| r.computed_start_value }\r\n```\r\n\r\n### Indexing the sequential ID column\r\n\r\nFor optimal performance, it's a good idea to index the sequential ID column\r\non sequenced models.\r\n\r\n### Skipping sequential ID generation\r\n\r\nIf you'd like to skip generating a sequential ID under certain conditions,\r\nyou may pass a lambda to the `skip` option:\r\n\r\n```ruby\r\nacts_as_sequenced skip: lambda { |r| r.score == 0 }\r\n```\r\n\r\n## Example\r\n\r\nSuppose you have a question model that has many answers. This example \r\ndemonstrates how to use Sequenced to enable access to the nested answer\r\nresource via its sequential ID.\r\n\r\n```ruby\r\n# app/models/question.rb\r\nclass Question < ActiveRecord::Base\r\n  has_many :answers\r\nend\r\n\r\n# app/models/answer.rb\r\nclass Answer < ActiveRecord::Base\r\n  belongs_to :question\r\n  acts_as_sequenced scope: :question_id\r\n  \r\n  # Automatically use the sequential ID in URLs\r\n  def to_param\r\n    self.sequential_id\r\n  end\r\nend\r\n\r\n# config/routes.rb\r\nresources :questions do\r\n  resources :answers\r\nend\r\n\r\n# app/controllers/answers_controller.rb\r\nclass AnswersController < ApplicationController\r\n  def show\r\n    @question = Question.find(params[:question_id])\r\n    @answer = @question.answers.find_by(sequential_id: params[:id])\r\n  end\r\nend\r\n```\r\n\r\nNow, answers are accessible via their sequential IDs:\r\n\r\n    http://example.com/questions/5/answers/1  # Good\r\n\r\ninstead of by their primary keys:\r\n\r\n    http://example.com/questions/5/answer/32454  # Bad\r\n\r\n## License\r\n\r\nCopyright &copy; 2011-2015 Derrick Reimer\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}